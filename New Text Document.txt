def concatenate_tuples(input_list):
    result = []
    seen_numbers = set()

    for tup in input_list:
        first_number = tup[0]
        rest_of_tuple = tup[1:]

        existing_tuple = None
        for idx, existing_tup in enumerate(result):
            if existing_tup[0] == first_number:
                existing_tuple = existing_tup
                break

        if existing_tuple:
            # Concatenate the rest of the tuples
            new_tuple = (existing_tuple[0],) + existing_tuple[1:] + rest_of_tuple
            result[idx] = new_tuple
        else:
            result.append(tup)
            seen_numbers.add(first_number)

    return result

List1 = [(3, 4), (3, 5), (3, 9), (6, 11), (6, 8, 7)]
final_list = concatenate_tuples(List1)
print(final_list)



# a= int(input("Enter age"))
# if a>18:
#     print(" you can vote.")
# else:
#     print("you cannot vote.")    

#     #to print fibonacci 

# a=0
# b=1
# c=1
# print(c)
# for i in range(0,10):
#     c=a+b
#     a=b
#     b=c
#     print(c)
# class Akash:

#     def __init__(self,a,b,__e):
#         self.a=a
#         self.b=b
#         self.__e=__e
#     def display(self):
#         print(f"the value of a is :{self.a} and value of b is:{self.b}")
#         print(f"the value of e is :{self._Akash__e}")

# class Employee(Akash):
#     def __init__(self,_name,_age,_salary,a, b, __e):
#         super().__init__(a, b, __e)
#         self._name=_name
#         self._age=_age
#         self._salary=_salary
#     def display(self):
#         # super().display()//we can use any of these two methord
#         Akash.display(self)
#         print(f"the name is :{self._name} and age is :{self._age} and salary is :{self._salary}")
      

# obj =Employee("Akash",22,40000,12,24,26)
# obj.display()
#Given the following list of tuples :
# List1 = [(3, 4), (3, 5), (3, 9), (6, 11), (6,
# 8,7)]
# Develop a function in python to
# concatenate the elements of this list if
# the first number is matched among
# tuples in this list. Return the final list
# after all possible concatenations.
